set nocompatible
set cindent
set ai
set shiftwidth=4
set sts=4
set tabstop=4 
set expandtab
set guifont=Consolas:h14
set nu
set ignorecase smartcase

"colorscheme molokai
autocmd Filetype asm colorscheme torte
setlocal noswapfile 

map <F6> :call CompileRunGpp()<CR> 
func! CompileRunGpp() 
exec "w" 
exec "!cd %:p:h"
exec "!g++ % -o %<" 
endfunc 

source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

autocmd GUIEnter * simalt ~x

autocmd BufNewFile *.[ch],*.hpp,*.cpp exec ":call SetTitleg()" 

func SetTitleg() 
    call append(0, "#include <bits/stdc++.h>")
    call append(2, "using namespace std;")
    call append(3, "")
    call append(4, 'inline int in() {int x; scanf("%d", &x); return x;}')
    call append(5, "#define pr(x) {cout << #x << ' ' << x << endl;}")
endfunc

func SetTitle()  
  call append(0, "#include <iostream>") 
  call append(1, "#include <cstring>") 
  call append(2, "#include <stack>") 
  call append(3, "#include <vector>") 
  call append(4, "#include <set>") 
  call append(5, "#include <map>") 
  call append(6, "#include <cmath>") 
  call append(7, "#include <queue>") 
  call append(8, "#include <sstream>") 
  call append(9, "#include <iomanip>") 
  call append(10, "#include <fstream>") 
  call append(11, "#include <cstdio>") 
  call append(12, "#include <cstdlib>") 
  call append(13, "#include <climits>") 
  call append(14, "#include <deque>") 
  call append(15, "#include <bitset>")
  call append(16, "#include <algorithm>") 
  call append(17, "using namespace std;") 
  call append(18, "  ") 
  call append(19, "#define PI acos(-1.0)")  
  call append(20, "#define LL long long")
  call append(21, "#define PII pair<int, int>")
  call append(22, "#define PLL pair<LL, LL>")
  call append(23, "#define mp make_pair")
  call append(24, '#define IN freopen("in.txt", "r", stdin)')
  call append(25, '#define OUT freopen("out.txt", "wb", stdout)')
  call append(26, '#define scan(x) scanf("%d", &x)')
  call append(27, '#define scan2(x, y) scanf("%d%d", &x, &y)')
  call append(28, '#define scan3(x, y, z) scanf("%d%d%d", &x, &y, &z)')
  call append(29, "#define sqr(x) (x) * (x)")
endfunc




set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascrīpt set omnifunc=javascrīptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete

"inoremap { {<CR>}<ESC>kA<CR>

"autocmd BufNewFile *.[ch],*.hpp,*.cpp exec ":call Bracket()" 
"function Bracket()
"endfunction

"autocmd BufNewFile *.[ch],*.hpp,*.cpp exec "inoremap { {<CR>}<ESC>kA<CR>"

